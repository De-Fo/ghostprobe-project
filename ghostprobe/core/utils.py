
"""
Utility functions and report generation
"""

from enum import Enum
from typing import Dict, Any, List
from pathlib import Path
import json
from datetime import datetime

class RiskLevel(Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class ReportGenerator:
    """Generate HTML and JSON reports"""
    
    def generate_html_report(self, results: Dict[str, Any], output_file: str):
        """Generate HTML report from scan results"""
        
        html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GhostProbe Security Report</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; }
        .header h1 { margin: 0; font-size: 2.5em; }
        .header .subtitle { opacity: 0.9; margin-top: 10px; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; padding: 30px; }
        .summary-card { background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; border-left: 4px solid #667eea; }
        .summary-card h3 { margin: 0; font-size: 2em; }
        .summary-card p { margin: 5px 0 0 0; color: #666; }
        .findings { padding: 0 30px 30px; }
        .finding-group { margin-bottom: 30px; }
        .finding-group h2 { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px; }
        .finding { background: white; border: 1px solid #e1e5e9; border-radius: 6px; padding: 15px; margin-bottom: 10px; }
        .finding.critical { border-left: 5px solid #dc3545; }
        .finding.high { border-left: 5px solid #fd7e14; }
        .finding.medium { border-left: 5px solid #ffc107; }
        .finding.low { border-left: 5px solid #28a745; }
        .finding.info { border-left: 5px solid #17a2b8; }
        .risk-badge { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 0.8em; font-weight: bold; text-transform: uppercase; }
        .risk-critical { background: #dc3545; color: white; }
        .risk-high { background: #fd7e14; color: white; }
        .risk-medium { background: #ffc107; color: black; }
        .risk-low { background: #28a745; color: white; }
        .risk-info { background: #17a2b8; color: white; }
        .footer { padding: 20px 30px; border-top: 1px solid #e1e5e9; color: #666; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è GhostProbe Security Report</h1>
            <div class="subtitle">Target: {target} | Generated: {timestamp}</div>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3>{total_findings}</h3>
                <p>Total Findings</p>
            </div>
            <div class="summary-card">
                <h3 style="color: #dc3545;">{critical}</h3>
                <p>Critical</p>
            </div>
            <div class="summary-card">
                <h3 style="color: #fd7e14;">{high}</h3>
                <p>High</p>
            </div>
            <div class="summary-card">
                <h3 style="color: #ffc107;">{medium}</h3>
                <p>Medium</p>
            </div>
            <div class="summary-card">
                <h3 style="color: #28a745;">{low}</h3>
                <p>Low</p>
            </div>
        </div>
        
        <div class="findings">
            {findings_html}
        </div>
        
        <div class="footer">
            Report generated by GhostProbe - Modular Offline-First Pentesting Toolkit
        </div>
    </div>
</body>
</html>"""
        
        # Group findings by type
        findings_by_type = {}
        for finding in results["findings"]:
            finding_type = finding["type"]
            if finding_type not in findings_by_type:
                findings_by_type[finding_type] = []
            findings_by_type[finding_type].append(finding)
        
        # Generate findings HTML
        findings_html = ""
        for finding_type, findings in findings_by_type.items():
            findings_html += f'<div class="finding-group">'
            findings_html += f'<h2>{finding_type.upper()} Findings ({len(findings)})</h2>'
            
            for finding in findings:
                risk = finding["risk"]
                findings_html += f'''
                <div class="finding {risk}">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <strong>{finding["value"]}</strong>
                        <span class="risk-badge risk-{risk}">{risk}</span>
                    </div>
                    <p style="margin: 0; color: #666;">{finding.get("details", "")}</p>
                </div>
                '''
            
            findings_html += '</div>'
        
        if not findings_html:
            findings_html = '<div class="finding-group"><h2>No Findings</h2><p>No security issues were detected during the scan.</p></div>'
        
        # Format timestamp
        timestamp = datetime.fromisoformat(results["timestamp"].replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M:%S')
        
        # Fill in template
        html_content = html_template.format(
            target=results["target"],
            timestamp=timestamp,
            total_findings=results["summary"]["total_findings"],
            critical=results["summary"]["critical"],
            high=results["summary"]["high"],
            medium=results["summary"]["medium"],
            low=results["summary"]["low"],
            findings_html=findings_html
        )
        
        # Write to file
        Path(output_file).write_text(html_content, encoding='utf-8')
    
    def generate_json_report(self, results: Dict[str, Any], output_file: str):
        """Generate JSON report from scan results"""
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)